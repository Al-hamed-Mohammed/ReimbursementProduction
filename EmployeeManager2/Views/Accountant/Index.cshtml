@model List<Accountants>

@{
    ViewData["Title"] = "Accountant";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1 class="text-center">Accountant Tab</h1>

<div class="row">
    <div class="col-sm-12">
        <p><h4>Upload Excel File</h4></p>
        <p>Supported File Format <b>xlsx</b> or <b>xltx</b></p>
        @using (Html.BeginForm("ImportExcelFile", "Accountant", FormMethod.Post,
new { enctype = "multipart/form-data", onsubmit = "theButton.disabled = true; return true;" }))
        {
            <input type="file" name="FormFile" id="FormFile">
            <input id="CopyToDb" class="btn btn-primary mb-2" style="width:auto;" type="submit" value="Copy to Database" />
        }
        <p class="text-danger">@ViewBag.ErrorMessage</p>
    </div>

    <div class="col-md-6">
        <a asp-action="Create" style="width:auto; margin-bottom:10px" class="btn btn-primary">Add New Record</a>
    </div>
    <div class="col-sm-6 text-right">
        <label id="debitSum" class="mr-3"></label>
        <label id="creditSum"></label>
        @*<input type="text" id="debitSum" />
            <input type="text" id="creditSum" />*@
    </div>



    @{
        string[] pagerDropdown = new string[] {"10", "15", "20", "50", "100" };
        List<object> toolbarItems = new List<object>();
        //toolbarItems.Add("Add");
        toolbarItems.Add("Edit");
        toolbarItems.Add("Delete");
        toolbarItems.Add("Cancel");
        toolbarItems.Add("Update");
        //toolbarItems.Add(new { text = "Clear Filter", tooltipText = "Clear Filter", id = "Click", align = "Right" });
    }

    <div class="col-sm-12">
        <ejs-grid id="Grid" actionComplete="actionComplete" actionBegin="onActionBegin" dataBound="dataBound" 
                  allowPaging="true" allowFiltering="true" toolbar=toolbarItems>
            <e-grid-aggregates>
                <e-grid-aggregate>
                    <e-aggregate-columns>
                        <e-aggregate-column field="Debit" type="Sum" format="C2" footerTemplate="${Sum}">
                        </e-aggregate-column>
                        <e-aggregate-column field="Credit" type="Sum" format="C2" footerTemplate="${Sum}">
                        </e-aggregate-column>
                    </e-aggregate-columns>
                </e-grid-aggregate>
            </e-grid-aggregates>
            <e-grid-filtersettings type="Menu"></e-grid-filtersettings>
            <e-data-manager json="@Model.ToArray()" insertUrl="/Accountant/Add" updateUrl="/Accountant/Update" 
                            removeUrl="/Accountant/Delete" adaptor="RemoteSaveAdaptor"></e-data-manager>
            <e-grid-editsettings showDeleteConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editsettings>
            <e-grid-pagesettings pageSizes="pagerDropdown" pageSize="10"></e-grid-pagesettings>
            <e-grid-columns>
                <e-grid-column field="Id" headerText="Id" isPrimaryKey="true" width="0"></e-grid-column>
                <e-grid-column field="Date" filter="@(new { ui= new { create = "onFilterCreate", write = "onFilterWrite" } })"
                               headerText="Date" editType="datepickeredit" format="yMd"></e-grid-column>
                <e-grid-column field="Transaction" headerText="Transaction" width="240"></e-grid-column>
                <e-grid-column field="Description" headerText="Description" width="320"></e-grid-column>
                <e-grid-column field="Category" headerText="Category"></e-grid-column>
                <e-grid-column field="Debit" headerText="Debit" editType="numericedit"></e-grid-column>
                <e-grid-column field="Credit" headerText="Credit" editType="numericedit"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
</div>
<style>
    .e-grid .e-gridheader {
        color: black;
    }
</style>
<script>
    function dataBound(e) {
        updateTotal();
    }
    function updateTotal() {
        var grid = document.getElementById('Grid').ej2_instances[0];
        var field = 'Debit';
        var field2 = 'Credit';
        document.getElementById('debitSum').innerText = 'Total Debit: ' + grid.aggregateModule.footerRenderer.aggregates.aggregates[field + ' - sum'].toFixed(2);
        document.getElementById('creditSum').innerText = 'Total Credit: ' + grid.aggregateModule.footerRenderer.aggregates.aggregates[field2 + ' - sum'].toFixed(2);
        //grid.getColumnHeaderByField(field).querySelector('.e-headertext').innerText =
        //    field + ' ' + grid.aggregateModule.footerRenderer.aggregates.aggregates[field + ' - sum'];
    }
    function dataBound(args) {
        updateTotal();
    }

    function actionComplete(args) {
        if (args.requestType === 'save' && args.action == "edit") {
            // The aggregate module is refreshed with the updated data 
            var grid = document.getElementById('Grid').ej2_instances[0];
            grid.aggregateModule.refresh(args.data);
            updateTotal();
        }
    }

    //code for Date Range Picker
    var startDate;
    var endDate;
    var customFilter = false;

    function onFilterCreate(args) {
        // Input element is created and appended to the target element 
        var flValInput = new ej.base.createElement('input', { className: 'flm-input' });
        args.target.appendChild(flValInput);
        // Date range picker is rendered and appended to the input element 
        var dateRangeInst = new ej.calendars.DateRangePicker({
            change: function (e) {
                if (e != undefined && e.value) {
                    var grid = document.getElementById("Grid").ej2_instances[0];
                    // Get date values from date range picker 
                    startDate = e.value[0];
                    endDate = e.value[1];
                    // Flag variable is used to identify this case in the Grid’s action begin event 
                    customFilter = true;
                    // Filter the required column with start date of the date range picker 
                    // GridInstance.filterByColumn(Column field name, filter operator, filter value) 
                    grid.filterByColumn('Date', 'greaterthan', startDate);
                }
            }
        });
        dateRangeInst.appendTo(flValInput);
    }

    function onActionBegin(args) {
        // Check for filter column and flag enabled in date range picker’s change event 
        if (args.requestType === "filtering" && args.currentFilteringColumn === "Date" && customFilter) {
            customFilter = false;
            // End date value is added as additional filter value with ‘lessthan’ filter operator 
            args.columns.push({ actualFilterValue: {}, actualOperator: {}, field: "Date", ignoreAccent: false, isForeignKey: false, matchCase: false, operator: "lessthan", predicate: "and", uid: this.getColumnByField(args.currentFilteringColumn).uid, value: endDate });
        }
    }

    function onFilterWrite(args) {
    }
</script>